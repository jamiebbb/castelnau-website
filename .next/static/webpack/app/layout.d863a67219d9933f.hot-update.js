"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/lib/stockData.ts":
/*!******************************!*\
  !*** ./src/lib/stockData.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getStockData: () => (/* binding */ getStockData)\n/* harmony export */ });\nconst CACHE_KEY = 'stock_data_cache';\nconst CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\nfunction isCacheValid(cachedData) {\n    const lastUpdated = new Date(cachedData.lastUpdated);\n    const now = new Date();\n    return now.getTime() - lastUpdated.getTime() < CACHE_DURATION;\n}\nasync function getStockData() {\n    try {\n        // Check localStorage cache first\n        if (true) {\n            const cachedDataStr = localStorage.getItem(CACHE_KEY);\n            if (cachedDataStr) {\n                const cachedData = JSON.parse(cachedDataStr);\n                if (isCacheValid(cachedData)) {\n                    return cachedData;\n                }\n            }\n        }\n        // If no valid cache, fetch from API\n        const response = await fetch(\"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=CGL.L&apikey=W0W2UQ53HXPJO5CL\");\n        if (!response.ok) {\n            throw new Error('Failed to fetch stock data');\n        }\n        const data = await response.json();\n        // Check for API rate limit\n        if (data['Note']) {\n            console.warn('API Rate limit reached:', data['Note']);\n            // If we have any cached data, return it even if expired\n            if (true) {\n                const cachedDataStr = localStorage.getItem(CACHE_KEY);\n                if (cachedDataStr) {\n                    return JSON.parse(cachedDataStr);\n                }\n            }\n            throw new Error('API rate limit reached');\n        }\n        const timeSeriesData = data['Time Series (Daily)'];\n        const dates = Object.keys(timeSeriesData).slice(0, 30); // Last 30 days\n        const prices = dates.map((date)=>parseFloat(timeSeriesData[date]['4. close']));\n        // Calculate market cap from shares outstanding and current price\n        const sharesOutstanding = 100000000; // 100 million shares\n        const marketCap = sharesOutstanding * prices[0];\n        const transformedData = {\n            currentPrice: prices[0],\n            marketCap: marketCap,\n            lastUpdated: new Date().toISOString(),\n            historicalData: {\n                labels: dates.map((date)=>new Date(date).toLocaleDateString()),\n                prices: prices\n            }\n        };\n        // Cache the new data\n        if (true) {\n            localStorage.setItem(CACHE_KEY, JSON.stringify(transformedData));\n        }\n        return transformedData;\n    } catch (error) {\n        console.error('Error fetching stock data:', error);\n        // If we have any cached data, return it even if expired\n        if (true) {\n            const cachedDataStr = localStorage.getItem(CACHE_KEY);\n            if (cachedDataStr) {\n                return JSON.parse(cachedDataStr);\n            }\n        }\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvc3RvY2tEYXRhLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFhQSxNQUFNQSxZQUFZO0FBQ2xCLE1BQU1DLGlCQUFpQixLQUFLLEtBQUssS0FBSyxNQUFNLDJCQUEyQjtBQUV2RSxTQUFTQyxhQUFhQyxVQUFxQjtJQUN6QyxNQUFNQyxjQUFjLElBQUlDLEtBQUtGLFdBQVdDLFdBQVc7SUFDbkQsTUFBTUUsTUFBTSxJQUFJRDtJQUNoQixPQUFPQyxJQUFJQyxPQUFPLEtBQUtILFlBQVlHLE9BQU8sS0FBS047QUFDakQ7QUFFTyxlQUFlTztJQUNwQixJQUFJO1FBQ0YsaUNBQWlDO1FBQ2pDLElBQUksSUFBNkIsRUFBRTtZQUNqQyxNQUFNQyxnQkFBZ0JDLGFBQWFDLE9BQU8sQ0FBQ1g7WUFDM0MsSUFBSVMsZUFBZTtnQkFDakIsTUFBTU4sYUFBd0JTLEtBQUtDLEtBQUssQ0FBQ0o7Z0JBQ3pDLElBQUlQLGFBQWFDLGFBQWE7b0JBQzVCLE9BQU9BO2dCQUNUO1lBQ0Y7UUFDRjtRQUVBLG9DQUFvQztRQUNwQyxNQUFNVyxXQUFXLE1BQU1DLE1BQ3BCO1FBR0gsSUFBSSxDQUFDRCxTQUFTRSxFQUFFLEVBQUU7WUFDaEIsTUFBTSxJQUFJQyxNQUFNO1FBQ2xCO1FBRUEsTUFBTUMsT0FBTyxNQUFNSixTQUFTSyxJQUFJO1FBRWhDLDJCQUEyQjtRQUMzQixJQUFJRCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCRSxRQUFRQyxJQUFJLENBQUMsMkJBQTJCSCxJQUFJLENBQUMsT0FBTztZQUNwRCx3REFBd0Q7WUFDeEQsSUFBSSxJQUE2QixFQUFFO2dCQUNqQyxNQUFNVCxnQkFBZ0JDLGFBQWFDLE9BQU8sQ0FBQ1g7Z0JBQzNDLElBQUlTLGVBQWU7b0JBQ2pCLE9BQU9HLEtBQUtDLEtBQUssQ0FBQ0o7Z0JBQ3BCO1lBQ0Y7WUFDQSxNQUFNLElBQUlRLE1BQU07UUFDbEI7UUFFQSxNQUFNSyxpQkFBaUJKLElBQUksQ0FBQyxzQkFBc0I7UUFDbEQsTUFBTUssUUFBUUMsT0FBT0MsSUFBSSxDQUFDSCxnQkFBZ0JJLEtBQUssQ0FBQyxHQUFHLEtBQUssZUFBZTtRQUN2RSxNQUFNQyxTQUFTSixNQUFNSyxHQUFHLENBQUNDLENBQUFBLE9BQ3ZCQyxXQUFXUixjQUFjLENBQUNPLEtBQUssQ0FBQyxXQUFXO1FBRzdDLGlFQUFpRTtRQUNqRSxNQUFNRSxvQkFBb0IsV0FBVyxxQkFBcUI7UUFDMUQsTUFBTUMsWUFBWUQsb0JBQW9CSixNQUFNLENBQUMsRUFBRTtRQUUvQyxNQUFNTSxrQkFBNkI7WUFDakNDLGNBQWNQLE1BQU0sQ0FBQyxFQUFFO1lBQ3ZCSyxXQUFXQTtZQUNYNUIsYUFBYSxJQUFJQyxPQUFPOEIsV0FBVztZQUNuQ0MsZ0JBQWdCO2dCQUNkQyxRQUFRZCxNQUFNSyxHQUFHLENBQUNDLENBQUFBLE9BQVEsSUFBSXhCLEtBQUt3QixNQUFNUyxrQkFBa0I7Z0JBQzNEWCxRQUFRQTtZQUNWO1FBQ0Y7UUFFQSxxQkFBcUI7UUFDckIsSUFBSSxJQUE2QixFQUFFO1lBQ2pDakIsYUFBYTZCLE9BQU8sQ0FBQ3ZDLFdBQVdZLEtBQUs0QixTQUFTLENBQUNQO1FBQ2pEO1FBRUEsT0FBT0E7SUFDVCxFQUFFLE9BQU9RLE9BQU87UUFDZHJCLFFBQVFxQixLQUFLLENBQUMsOEJBQThCQTtRQUM1Qyx3REFBd0Q7UUFDeEQsSUFBSSxJQUE2QixFQUFFO1lBQ2pDLE1BQU1oQyxnQkFBZ0JDLGFBQWFDLE9BQU8sQ0FBQ1g7WUFDM0MsSUFBSVMsZUFBZTtnQkFDakIsT0FBT0csS0FBS0MsS0FBSyxDQUFDSjtZQUNwQjtRQUNGO1FBQ0EsTUFBTWdDO0lBQ1I7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxqYW1pZVxcT25lRHJpdmUgLSBQaG9lbml4IEFzc2V0IE1hbmFnZW1lbnQgUGFydG5lcnNcXENhc3RlbG5hdSBHcm91cFxcU2NyYXBpbmdcXFdlYnNpdGVcXGNhc3RlbG5hdS13ZWJzaXRlXFxzcmNcXGxpYlxcc3RvY2tEYXRhLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xyXG5cclxuaW50ZXJmYWNlIFN0b2NrRGF0YSB7XHJcbiAgY3VycmVudFByaWNlOiBudW1iZXI7XHJcbiAgbWFya2V0Q2FwOiBudW1iZXI7XHJcbiAgbGFzdFVwZGF0ZWQ6IHN0cmluZztcclxuICBoaXN0b3JpY2FsRGF0YToge1xyXG4gICAgbGFiZWxzOiBzdHJpbmdbXTtcclxuICAgIHByaWNlczogbnVtYmVyW107XHJcbiAgfTtcclxufVxyXG5cclxuY29uc3QgQ0FDSEVfS0VZID0gJ3N0b2NrX2RhdGFfY2FjaGUnO1xyXG5jb25zdCBDQUNIRV9EVVJBVElPTiA9IDI0ICogNjAgKiA2MCAqIDEwMDA7IC8vIDI0IGhvdXJzIGluIG1pbGxpc2Vjb25kc1xyXG5cclxuZnVuY3Rpb24gaXNDYWNoZVZhbGlkKGNhY2hlZERhdGE6IFN0b2NrRGF0YSk6IGJvb2xlYW4ge1xyXG4gIGNvbnN0IGxhc3RVcGRhdGVkID0gbmV3IERhdGUoY2FjaGVkRGF0YS5sYXN0VXBkYXRlZCk7XHJcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcclxuICByZXR1cm4gbm93LmdldFRpbWUoKSAtIGxhc3RVcGRhdGVkLmdldFRpbWUoKSA8IENBQ0hFX0RVUkFUSU9OO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U3RvY2tEYXRhKCk6IFByb21pc2U8U3RvY2tEYXRhPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIENoZWNrIGxvY2FsU3RvcmFnZSBjYWNoZSBmaXJzdFxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIGNvbnN0IGNhY2hlZERhdGFTdHIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShDQUNIRV9LRVkpO1xyXG4gICAgICBpZiAoY2FjaGVkRGF0YVN0cikge1xyXG4gICAgICAgIGNvbnN0IGNhY2hlZERhdGE6IFN0b2NrRGF0YSA9IEpTT04ucGFyc2UoY2FjaGVkRGF0YVN0cik7XHJcbiAgICAgICAgaWYgKGlzQ2FjaGVWYWxpZChjYWNoZWREYXRhKSkge1xyXG4gICAgICAgICAgcmV0dXJuIGNhY2hlZERhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgbm8gdmFsaWQgY2FjaGUsIGZldGNoIGZyb20gQVBJXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgICBgaHR0cHM6Ly93d3cuYWxwaGF2YW50YWdlLmNvL3F1ZXJ5P2Z1bmN0aW9uPVRJTUVfU0VSSUVTX0RBSUxZJnN5bWJvbD1DR0wuTCZhcGlrZXk9VzBXMlVRNTNIWFBKTzVDTGBcclxuICAgICk7XHJcbiAgICBcclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggc3RvY2sgZGF0YScpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGZvciBBUEkgcmF0ZSBsaW1pdFxyXG4gICAgaWYgKGRhdGFbJ05vdGUnXSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ0FQSSBSYXRlIGxpbWl0IHJlYWNoZWQ6JywgZGF0YVsnTm90ZSddKTtcclxuICAgICAgLy8gSWYgd2UgaGF2ZSBhbnkgY2FjaGVkIGRhdGEsIHJldHVybiBpdCBldmVuIGlmIGV4cGlyZWRcclxuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgY29uc3QgY2FjaGVkRGF0YVN0ciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKENBQ0hFX0tFWSk7XHJcbiAgICAgICAgaWYgKGNhY2hlZERhdGFTdHIpIHtcclxuICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGNhY2hlZERhdGFTdHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FQSSByYXRlIGxpbWl0IHJlYWNoZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0aW1lU2VyaWVzRGF0YSA9IGRhdGFbJ1RpbWUgU2VyaWVzIChEYWlseSknXTtcclxuICAgIGNvbnN0IGRhdGVzID0gT2JqZWN0LmtleXModGltZVNlcmllc0RhdGEpLnNsaWNlKDAsIDMwKTsgLy8gTGFzdCAzMCBkYXlzXHJcbiAgICBjb25zdCBwcmljZXMgPSBkYXRlcy5tYXAoZGF0ZSA9PiBcclxuICAgICAgcGFyc2VGbG9hdCh0aW1lU2VyaWVzRGF0YVtkYXRlXVsnNC4gY2xvc2UnXSlcclxuICAgICk7XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIG1hcmtldCBjYXAgZnJvbSBzaGFyZXMgb3V0c3RhbmRpbmcgYW5kIGN1cnJlbnQgcHJpY2VcclxuICAgIGNvbnN0IHNoYXJlc091dHN0YW5kaW5nID0gMTAwMDAwMDAwOyAvLyAxMDAgbWlsbGlvbiBzaGFyZXNcclxuICAgIGNvbnN0IG1hcmtldENhcCA9IHNoYXJlc091dHN0YW5kaW5nICogcHJpY2VzWzBdO1xyXG5cclxuICAgIGNvbnN0IHRyYW5zZm9ybWVkRGF0YTogU3RvY2tEYXRhID0ge1xyXG4gICAgICBjdXJyZW50UHJpY2U6IHByaWNlc1swXSxcclxuICAgICAgbWFya2V0Q2FwOiBtYXJrZXRDYXAsXHJcbiAgICAgIGxhc3RVcGRhdGVkOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIGhpc3RvcmljYWxEYXRhOiB7XHJcbiAgICAgICAgbGFiZWxzOiBkYXRlcy5tYXAoZGF0ZSA9PiBuZXcgRGF0ZShkYXRlKS50b0xvY2FsZURhdGVTdHJpbmcoKSksXHJcbiAgICAgICAgcHJpY2VzOiBwcmljZXNcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBDYWNoZSB0aGUgbmV3IGRhdGFcclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShDQUNIRV9LRVksIEpTT04uc3RyaW5naWZ5KHRyYW5zZm9ybWVkRGF0YSkpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gdHJhbnNmb3JtZWREYXRhO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBzdG9jayBkYXRhOicsIGVycm9yKTtcclxuICAgIC8vIElmIHdlIGhhdmUgYW55IGNhY2hlZCBkYXRhLCByZXR1cm4gaXQgZXZlbiBpZiBleHBpcmVkXHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgY29uc3QgY2FjaGVkRGF0YVN0ciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKENBQ0hFX0tFWSk7XHJcbiAgICAgIGlmIChjYWNoZWREYXRhU3RyKSB7XHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoY2FjaGVkRGF0YVN0cik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufSAiXSwibmFtZXMiOlsiQ0FDSEVfS0VZIiwiQ0FDSEVfRFVSQVRJT04iLCJpc0NhY2hlVmFsaWQiLCJjYWNoZWREYXRhIiwibGFzdFVwZGF0ZWQiLCJEYXRlIiwibm93IiwiZ2V0VGltZSIsImdldFN0b2NrRGF0YSIsImNhY2hlZERhdGFTdHIiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwiRXJyb3IiLCJkYXRhIiwianNvbiIsImNvbnNvbGUiLCJ3YXJuIiwidGltZVNlcmllc0RhdGEiLCJkYXRlcyIsIk9iamVjdCIsImtleXMiLCJzbGljZSIsInByaWNlcyIsIm1hcCIsImRhdGUiLCJwYXJzZUZsb2F0Iiwic2hhcmVzT3V0c3RhbmRpbmciLCJtYXJrZXRDYXAiLCJ0cmFuc2Zvcm1lZERhdGEiLCJjdXJyZW50UHJpY2UiLCJ0b0lTT1N0cmluZyIsImhpc3RvcmljYWxEYXRhIiwibGFiZWxzIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImVycm9yIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/stockData.ts\n"));

/***/ })

});